// Mocks generated by Mockito 5.4.6 from annotations
// in aipet_frontend/test/unit/features/notification/domain/usecases/mark_notification_as_read_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:aipet_frontend/features/notification/domain/entities/entities.dart'
    as _i2;
import 'package:aipet_frontend/features/notification/domain/repositories/notification_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotificationModel_0 extends _i1.SmartFake
    implements _i2.NotificationModel {
  _FakeNotificationModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNotificationSettings_1 extends _i1.SmartFake
    implements _i2.NotificationSettings {
  _FakeNotificationSettings_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [NotificationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationRepository extends _i1.Mock
    implements _i3.NotificationRepository {
  MockNotificationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.NotificationModel>> getAllNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#getAllNotifications, []),
            returnValue: _i4.Future<List<_i2.NotificationModel>>.value(
              <_i2.NotificationModel>[],
            ),
          )
          as _i4.Future<List<_i2.NotificationModel>>);

  @override
  _i4.Future<_i2.NotificationModel?> getNotificationById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getNotificationById, [id]),
            returnValue: _i4.Future<_i2.NotificationModel?>.value(),
          )
          as _i4.Future<_i2.NotificationModel?>);

  @override
  _i4.Future<_i2.NotificationModel> createNotification(
    _i2.NotificationModel? notification,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createNotification, [notification]),
            returnValue: _i4.Future<_i2.NotificationModel>.value(
              _FakeNotificationModel_0(
                this,
                Invocation.method(#createNotification, [notification]),
              ),
            ),
          )
          as _i4.Future<_i2.NotificationModel>);

  @override
  _i4.Future<_i2.NotificationModel> updateNotification(
    _i2.NotificationModel? notification,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateNotification, [notification]),
            returnValue: _i4.Future<_i2.NotificationModel>.value(
              _FakeNotificationModel_0(
                this,
                Invocation.method(#updateNotification, [notification]),
              ),
            ),
          )
          as _i4.Future<_i2.NotificationModel>);

  @override
  _i4.Future<void> deleteNotification(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteNotification, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> markAsRead(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#markAsRead, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<int> getUnreadCount() =>
      (super.noSuchMethod(
            Invocation.method(#getUnreadCount, []),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<_i2.NotificationSettings> getNotificationSettings() =>
      (super.noSuchMethod(
            Invocation.method(#getNotificationSettings, []),
            returnValue: _i4.Future<_i2.NotificationSettings>.value(
              _FakeNotificationSettings_1(
                this,
                Invocation.method(#getNotificationSettings, []),
              ),
            ),
          )
          as _i4.Future<_i2.NotificationSettings>);

  @override
  _i4.Future<void> saveNotificationSettings(
    _i2.NotificationSettings? settings,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveNotificationSettings, [settings]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> requestNotificationPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestNotificationPermission, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> sendTestNotification() =>
      (super.noSuchMethod(
            Invocation.method(#sendTestNotification, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
