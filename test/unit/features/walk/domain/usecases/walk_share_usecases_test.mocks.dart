// Mocks generated by Mockito 5.4.6 from annotations
// in aipet_frontend/test/unit/features/walk/domain/usecases/walk_share_usecases_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:aipet_frontend/features/walk/domain/entities/walk_record_entity.dart'
    as _i4;
import 'package:aipet_frontend/features/walk/domain/repositories/walk_share_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWalkShareResult_0 extends _i1.SmartFake
    implements _i2.WalkShareResult {
  _FakeWalkShareResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [WalkShareRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalkShareRepository extends _i1.Mock
    implements _i2.WalkShareRepository {
  MockWalkShareRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.WalkShareResult> copyToClipboard(String? text) =>
      (super.noSuchMethod(
            Invocation.method(#copyToClipboard, [text]),
            returnValue: _i3.Future<_i2.WalkShareResult>.value(
              _FakeWalkShareResult_0(
                this,
                Invocation.method(#copyToClipboard, [text]),
              ),
            ),
          )
          as _i3.Future<_i2.WalkShareResult>);

  @override
  _i3.Future<_i2.WalkShareResult> saveAsImage(
    _i4.WalkRecordEntity? walkRecord,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveAsImage, [walkRecord]),
            returnValue: _i3.Future<_i2.WalkShareResult>.value(
              _FakeWalkShareResult_0(
                this,
                Invocation.method(#saveAsImage, [walkRecord]),
              ),
            ),
          )
          as _i3.Future<_i2.WalkShareResult>);

  @override
  _i3.Future<_i2.WalkShareResult> systemShare(
    String? text, {
    String? subject,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#systemShare, [text], {#subject: subject}),
            returnValue: _i3.Future<_i2.WalkShareResult>.value(
              _FakeWalkShareResult_0(
                this,
                Invocation.method(#systemShare, [text], {#subject: subject}),
              ),
            ),
          )
          as _i3.Future<_i2.WalkShareResult>);

  @override
  String generateShareText(_i4.WalkRecordEntity? walkRecord) =>
      (super.noSuchMethod(
            Invocation.method(#generateShareText, [walkRecord]),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.method(#generateShareText, [walkRecord]),
            ),
          )
          as String);
}
